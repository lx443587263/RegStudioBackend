# Generated by Django 3.2 on 2023-10-10 19:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessTimeOutLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('re_time', models.CharField(max_length=32, verbose_name='请求时间')),
                ('re_user', models.CharField(max_length=32, verbose_name='操作人')),
                ('re_ip', models.CharField(max_length=32, verbose_name='请求IP')),
                ('re_url', models.CharField(max_length=255, verbose_name='请求url')),
                ('re_method', models.CharField(max_length=11, verbose_name='请求方法')),
                ('re_content', models.TextField(null=True, verbose_name='请求参数')),
                ('rp_content', models.TextField(null=True, verbose_name='响应参数')),
                ('access_time', models.IntegerField(verbose_name='响应耗时/ms')),
            ],
            options={
                'db_table': 'access_timeout_logs',
            },
        ),
        migrations.CreateModel(
            name='CategoryInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=128, unique=True, verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='FilesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
            ],
            options={
                'db_table': 'files_storage',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='IpInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_uuid', models.CharField(max_length=128, unique=True, verbose_name='IpUuid')),
                ('ip_name', models.CharField(max_length=64, verbose_name='IpName')),
                ('private_project', models.BooleanField(verbose_name='PrivateProject')),
                ('description', models.TextField(null=True, verbose_name='IpDescription')),
                ('start_date', models.DateField(null=True, verbose_name='StartDate')),
                ('status', models.CharField(max_length=32, verbose_name='Status')),
                ('end_date', models.DateField(null=True, verbose_name='EndDate')),
                ('create_user', models.CharField(max_length=64, verbose_name='CreateUser')),
                ('version', models.CharField(default='v1.0', max_length=64, verbose_name='Version')),
                ('category', models.CharField(max_length=128, verbose_name='Category')),
                ('tags', models.CharField(max_length=256, null=True, verbose_name='Tags')),
                ('child_version', models.CharField(max_length=256, null=True, verbose_name='Child Version')),
                ('permission', models.CharField(max_length=256, null=True, verbose_name='Permission List')),
                ('see_permission', models.CharField(max_length=256, null=True, verbose_name='see_permission')),
            ],
        ),
        migrations.CreateModel(
            name='OpLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('re_time', models.CharField(max_length=32, verbose_name='请求时间')),
                ('re_user', models.CharField(max_length=32, verbose_name='操作人')),
                ('re_ip', models.CharField(max_length=32, verbose_name='请求IP')),
                ('re_url', models.CharField(max_length=255, verbose_name='请求url')),
                ('re_method', models.CharField(max_length=11, verbose_name='请求方法')),
                ('re_content', models.TextField(null=True, verbose_name='请求参数')),
                ('rp_content', models.TextField(null=True, verbose_name='响应参数')),
                ('access_time', models.IntegerField(verbose_name='响应耗时/ms')),
            ],
            options={
                'db_table': 'op_logs',
            },
        ),
        migrations.CreateModel(
            name='RegGatherInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reg_gather_uuid', models.CharField(max_length=128, unique=True, verbose_name='RegGatherUuid')),
                ('tag', models.CharField(max_length=64, verbose_name='Tag')),
                ('offset', models.CharField(max_length=64, verbose_name='Offset')),
                ('reg_gather_name', models.CharField(max_length=128, verbose_name='RegGatherName')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('reset', models.CharField(max_length=64, null=True, verbose_name='Reset')),
                ('address', models.CharField(max_length=64, null=True, verbose_name='Address')),
                ('retention', models.CharField(blank=True, max_length=64, null=True, verbose_name='Retention')),
                ('reg_ram', models.CharField(max_length=64, null=True, verbose_name='reg/ram')),
                ('ip_uuid', models.ForeignKey(db_column='ip_uuid', max_length=128, on_delete=django.db.models.deletion.CASCADE, to='IP.ipinfo', to_field='ip_uuid')),
            ],
            options={
                'verbose_name': 'RegGather信息',
                'db_table': 'IP_reggatherinfo',
            },
        ),
        migrations.CreateModel(
            name='SingleRegInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('single_reg_uuid', models.CharField(max_length=128, unique=True, verbose_name='SingleRegUuid')),
                ('start_bit', models.CharField(max_length=16, verbose_name='StartBit')),
                ('end_bit', models.CharField(max_length=16, verbose_name='EndBit')),
                ('reset_value', models.CharField(max_length=64, verbose_name='ResetValue')),
                ('RW', models.CharField(max_length=16, verbose_name='R/W')),
                ('field', models.CharField(max_length=128, verbose_name='Field')),
                ('note', models.CharField(blank=True, max_length=128, null=True, verbose_name='Note')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('hw_RW', models.CharField(max_length=16, null=True, verbose_name='HW R/W')),
                ('reg_gather_uuid', models.ForeignKey(db_column='reg_gather_uuid', on_delete=django.db.models.deletion.CASCADE, to='IP.reggatherinfo', to_field='reg_gather_uuid')),
            ],
        ),
        migrations.CreateModel(
            name='TemplateFilesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='template/')),
                ('name', models.CharField(max_length=128, verbose_name='FileName')),
                ('size', models.CharField(max_length=128, verbose_name='Size')),
                ('file_uuid', models.CharField(max_length=128, unique=True, verbose_name='file_uuid')),
            ],
            options={
                'db_table': 'template_files_storage',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ValueInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_uuid', models.CharField(max_length=128, unique=True, verbose_name='value_uuid')),
                ('valueId', models.CharField(max_length=64, null=True, verbose_name='ValueId')),
                ('value', models.CharField(max_length=64, verbose_name='Value')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('single_reg_uuid', models.ForeignKey(db_column='single_reg_uuid', on_delete=django.db.models.deletion.CASCADE, to='IP.singlereginfo', to_field='single_reg_uuid')),
            ],
        ),
        migrations.CreateModel(
            name='modificationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=128, verbose_name='user')),
                ('data', models.DateTimeField(verbose_name='StartDate')),
                ('former_content', models.TextField(null=True, verbose_name='Former Data')),
                ('modify_content', models.TextField(null=True, verbose_name='Modify Data')),
                ('modify_model', models.CharField(max_length=64, verbose_name='Modify Model')),
                ('user_uuid', models.ForeignKey(db_column='user_uuid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='user_uuid')),
            ],
            options={
                'db_table': 'modificationInfo',
            },
        ),
        migrations.CreateModel(
            name='IpPageFilesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='IpPage/')),
                ('name', models.CharField(max_length=128, verbose_name='FileName')),
                ('version', models.CharField(max_length=128, verbose_name='Version')),
                ('commit_content', models.CharField(max_length=256, verbose_name='Commit Content')),
                ('create_user', models.CharField(max_length=128, verbose_name='Create User')),
                ('upload_data', models.CharField(max_length=128, verbose_name='Upload_data')),
                ('file_uuid', models.CharField(max_length=128, unique=True, verbose_name='file_uuid')),
                ('ip_uuid', models.ForeignKey(db_column='ip_uuid', max_length=128, on_delete=django.db.models.deletion.CASCADE, to='IP.ipinfo', to_field='ip_uuid')),
            ],
            options={
                'db_table': 'ip_page_files_storage',
                'ordering': ['-id'],
            },
        ),
    ]
